$#include "LuaCocos2d.h"
$#include "Skill.h"
$#include "Enemy.h"
$#include "Species.h"
$#include "Character.h"
$#include "CharacterManager.h"
$#include "EnemyManager.h"
$#include "EnemySkill.h"
$#include "MessageManager.h"
$#include "EffectLayer.h"
$#include "PopupWindow.h"
$#include "IRegister.h"
$#include "Controller.h"
$#include "StatusLayer.h"
$#include "EnemySkill.h"
$#include "Map.h"
$#include "SaveData.h"
$#include "PlayLog.h"
$#include "VQTime.h"
$#include "SEManager.h"

#define MAX_ROW

enum SkillRange {
	SkillRangeSingle,
	SkillRangeAll,
	SkillRangeHorizontal,
	SkillRangeVertical,
	SkillRangeBack,
	SkillRangeSelf,
	SkillRangeFront
};

enum SkillType {
	SkillTypeNone,
	SkillTypeNormal,
	SkillTypePhysical,
	SkillTypeMagical
};

enum CharacterType {
	CharacterTypeVox,
	CharacterTypeLaska
};

enum EnemyItem {
	EnemyItemNone,
	EnemyItemShield,
	EnemyItemBarrier
};

enum MusicSetType {
	MusicSetTypeWay,
	MusicSetTypeBoss
};

enum StatusLayerPartsTag {
	MaxHPLabelTag,
	CurrentHPLabelTag,
	LevelLabelTag,
	LifeGaugeBackgroundTag,
	LifeGaugeTag,
	MPMarkerTag
};

enum ControllerFrameType {
	ControllerFrameTypeNone,
	ControllerFrameTypeCommon,
	ControllerFrameTypeFull
};

enum EffectLayerCutinType {
	EffectLayerCutinTypeNormal,
	EffectLayerCutinTypeFailure,
	EffectLayerCutinTypeHold,
	EffectLayerCutinTypeCastOff
};

enum PlayerLogKey {
	PlayLogKeyMaxDefeat,
	PlayLogKeyVOXAttackCount,
	PlayLogKeyLSKAttackCount,
	PlayLogKeyRunCount,
	PlayLogKeyMaxRepeatChangeCount,
	PlayLogKeyTurn,
	PlayLogKeyMaxRepeatCount,
	PlayLogKeyTensionCount,
	PlayLogKeyChangeCount,
	PlayLogKeyHitDamage,
	PlayLogKeyNum

};

enum DamageType {
	DamageTypeNone,
	DamageTypeHit,
	DamageTypeNoDamage,
	DamageTypeDisable,
	DamageTypeShield,
	DamageTypeInvincible,
	DamageTypeWeak,
	DamageTypePhysicalResist,
	DamageTypeMagicalResist,
	DamageTypePhysicalInvalid,
	DamageTypeMagicalInvalid,
	DamageTypeShieldBreak,
	DamageTypeBarrierBreak,
	DamageTypeDeath,
	DamageTypeAbsorption
};

enum SaveDataCountKey {
	SaveDataCountKeyDead,
	SaveDataCountKeyTurn,
	SaveDataCountKeyDefeat,
	SaveDataCountKeyMPMiss,
	SaveDataCountKeyBoot,
	SaveDataCountKeyHitDamage,
	SaveDataCountKeyAttackDamage,
	SaveDataCountKeyDictionaryCount,
	SaveDataCountKeyClear,
	SaveDataCountKeyNum
};

enum DamageLabelType {
	DamageLabelTypeAttack,
	DamageLabelTypeHit,
	DamageLabelTypeCure,
	DamageLabelTypeMPCure
};

class Skill :public CCObject {
	int getPower(CharacterManager* manager);
	string getIdentifier();
	string getName();
	int getMP();
};

class Enemy : public CCSprite, public IRegister {
	string getIdentifier();
	int getRow();
	int getCol();
	int getHP();
	int getAttack();
	int getMaxHP();
	SkillType getType();
	string getName();
	EnemyItem getItem();
	void moveRow(float row);
	void setRow(float row);
	void setMaxHP(int hp);
	void setCol(int col);
	bool setAnimationClip(const char* clipName, int frames, bool hasFrame);
	bool setDefaultAnimationClip();
	void setCounter(int counter);
	void setHP(int hp);
	void setExp(int exp);
	void setItem(EnemyItem item);
	void setSkillType(SkillType type);
	void setAttack(int attack);
	int getRegister(const char* key, int defaultValue);
	void setRegister(const char* key, int value);
	bool hasRegister(const char* key);
	Species* getSpecies();
};

class Species : public CCObject {
	bool isEnableSkill(Skill* skill);
};

class Character : public CCObject {
	string getName();
	CharacterType getCharacterType();
};

class CharacterManager : public CCObject {
	bool getShield();
	void setShield(bool shield);
	void changeCharacter();
	void addTension(int tension);
	int getTension();
	int getLevel();
	void setLevel(int lv);
	int addHP(int hp);
	int addMP(int mp);
	int getDrumLevel();
	void setDrumLevel(int lv);
	DamageType damage(int d);
	int getHP();
	int getMP();
	int getMaxHP();
	int getMaxMP();
	void resetTension();
	Character* getCurrentCharacter();
	int getRepeatCount();
	void setRepeatCount(int repeat);
	Skill* getLastSkill();
	int getExp();
	int getExpWithLevel(int level);
	void setExp(int exp);
};

class EnemyManager : public CCLayer {
	void nextTurn(CharacterManager* manager, bool moveOnly);
	Enemy* popEnemyAt(const char* enemy, float row, int col);
	Enemy* getBoss();
	CCArray* getEnemies();
	void setBoss(Enemy* enemy);
	void loadEnemyTextureAsync(const char* enemyImageName);
	void removeEnemy(Enemy* enemy);
	void removeAllNormalEnemies();
	void removeAllEnemies();
};

class MessageManager : public CCObject {
	static MessageManager* sharedManager();
	void pushMessage(const char* message);
	void pushRandomMessageFromLua(const char* luaFile);
	void pushRandomMessageFromFunction(const char* scriptName, Map* map, CharacterManager* characterManager, EnemyManager* enemyManager);
};

class EffectLayer : public CCLayer {
	static EffectLayer* sharedLayer();
	PopupWindow* addPopupWindow(int pages);
	void addEffectOnEnemy(Enemy* enemy, const char* prefix, int frameCount, CCRect rect);
	void addDamageLabel(int damage, int offset, DamageLabelType type);
	void addDamageLabelOnEnemy(Enemy* target, int damage, DamageLabelType type);
	void setCutinExtension(CCNode* extension);
	PopupWindow* getPopupWindow();
};

class PopupWindow : public CCSprite {
	CCNode* getPage(int page);
	void setText(int page, const char* headerText, const char* message);
	void addImage(int page, const char* filename);
	void addImage(int page, const char* filename, CCPoint point);
};

class IRegister {
	int getRegister(const char* key, int defaultValue);
	void setRegister(const char* key, int value);
	bool hasRegister(const char* key);
	bool getBool(const char* key);
	void setBool(const char* key, bool value);
	void clearRegister();
};

class EnemySkill : public CCObject {
	string getName();
};

class Map : public CCObject, public IRegister {
	int getMaxLevel();
	int getInitialLevel();
	string getName();
	string getIdentifier();
	bool isBossStage();
	void changeBackgroundImage(const char* imageName);
};

class SaveData : public CCObject {
	static SaveData* sharedData();
	bool isUnlockAchievement(const char* identifier);
	void unlockAchievement(const char* identifier);
	int getDefeatedCount(const char* enemyIdentifier);
	void addDefeatedCountForEnemy(const char* enemyIdentifier);
	void addCountFor(SaveDataCountKey key, int value);
	void addCountFor(SaveDataCountKey key);
	int getCountFor(SaveDataCountKey key);
	void setClearedForMap(const char* mapIdentifier);
	bool isClearedMap(const char* mapIdentifier);
	void save();
	void load();
	int getAllEnemyDictionaryCount();
};

class PlayLog :public CCObject {
	int getCount(int key);
};

class VQTime : public CCObject {
	static VQTime* sharedTime();
	int getCurrentHour();
};

class SEManager :public CCObject {
	static SEManager* sharedManager();
	void registerEffect(const char* filename);
	void registerEffect(const char* filename, float delay);
};
